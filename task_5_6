# задание 5.6
#
# Техническое задание ниже.
# Чем занимались люди на скучных уроках до наступления эры мобильных
# телефонов с интернетом, кучей приложений и прочими пожирателями времени?
# Да много чем, в общем-то. Однако одно из таких развлечений вы знаете точно
# — это «Крестики-нолики»!
# Понимаете, к чему идет ход наших мыслей? Вы узнали достаточно много, чтобы создать
# свою первую компьютерную игру!
# Конечно, графическую оболочку GUI (graphic user interface) создать пока что не получится,
# но ведь это не страшно, потому что вы мастерски умеете пользоваться консолью. Получится своего рода кибервинтаж.
# Итак, мы имеем:
# Игру «Крестики-нолики».
# Консоль, куда будет выводиться ход игры. Тут делать красиво мы умеем с помощью форматированных строк.
# Неутолимое желание написать что-то реальное своими руками.
# Размер поля предполагается равным 3x3.
# **** конец технического задания
#
# автор Кирбасов Петр Витальевич
# ссылка на описание алгоритма
# https://ru.wikipedia.org/wiki/%D0%9A%D1%80%D0%B5%D1%81%D1%82%D0%B8%D0%BA%D0%B8-%D0%BD%D0%BE%D0%BB%D0%B8%D0%BA%D0%B8
# версия статьи от 8 февраля 2023г
# дата 8 февраля 2023

# программа состоит из 2х частей,

# часть 1: Пользователь ходит первым. Ставит крестик.
# Граф ответных ходов реализован в виде вложенных словарей - M, который собирается из многих более
# мелких словарей M01 -- M47, всего 21 штука.
# В словаре M записаны ходы для игры, если первый ход пользователя 0 или 3 или 4
# Т е в центр, в верхний правый угол и в середину верхней стенки.
# Другие варианты реализованы использованием назначаемой функции f(), которая производит
# пересчет координат.
# Координаты клеток -4 .. 4
# Координаты хода пользователя и словарь передаются в рекурсивную функцию hod().

# часть 2, программа делает первый ход в центр, пользователь ходит вторым
# Граф ходов не используется. Номер ячейки преобразуется к виду (x,y). От (-1,-1) до (1,1).
# Ходы записываются в списки x[], y[].
# Алгоритм реализован ветвлением с операторами if: elif: else:
# Последующие ходы вычисляются исходя из предыдущих математически.
# Операторы цикла не используются, только ветвление.

# Примечание, обработка ошибка ValueError не предусмотрена.
# Добрый день, в задании 5.6, использую x = int(input("ваш ход ( от-4 до 4) >")),
# если вводится не корректное значение, возникает ошибка ValueError.
# Посмотрел интернет, но не понял как ее правильно отработать, чтобы код не вылетал.

#
#                            КОМПЬЮТЕРНАЯ ИГРА КРЕСТИКИ НОЛИКИ.
#

import sys

fi=[
 "! 2  3  4 !  !         !",
 "!-1  0  1 !  !         !",
 "!-4 -3 -2 !  !         !"]
# НОВАЯ СИСТЕМА КООРДИНАТ
#   2   3   4
#   -1  0   1
#   -4  -3  -2
# 1 - означает координата 1, 1.1 - ничья с ходом 1, 1.2 - победа с ходом 1

istoria=set()

# первый ход в центр
# третий ход -4, ОТВЕТ 2
M01={
    3:(-3,{-2:1,-1:1,1:-1}),
    -3:3.2,-2:3.2,-1:3.2,1:3.2}
#ТРЕТИЙ ХОД 2, ответ -2
M02={1:(-1,{-4:-3, -3:3, 3:-3}),
     -3:1.2, -2:1.2, -1:1.2, 3:1.2}
#ТРЕТИЙ ХОД -2, ответ 2
M03={3:(-3,{-4:-1, -1:1, 1:-1}),
     -1:3.2, 2:3.2, -3:3.2, 1:3.2}
#ТРЕТИЙ ХОД 3, ответ -3
M04={2:(-2,{-4:1.2, -1:1.2, 1:-4.2}),
     1:(-1,{2:-2,-2:2,-4:2}),
     -1:(1,{2:-2,-2:2,-4:2}),
     -2:(2,{-1:1,1:-1,-4:1}),
     -4:(-2,{2:1.2,-1:1.2,1:-1})}
#ТРЕТИЙ ХОД 1, ответ -1
M05={-2:(2,{-4:3.2,3:-4.2,-3:3.2}),
       3:(-3,{-2:2,2:-2,-4:-2}),
      -3:(3,{-2:2.2,2:-2,-4:2.2}),
       2:(-2,{-3:3,3:-3,-4:3}),
      -4:(2,{3:-3,-3:3.2,-2:3.2})}
#ТРЕТИЙ ХОД -1, ответ 1
M06={-2:(2,{3:-3,
           -4:3.2,
            -3:3.2}),
     2:-2.2,
     3:-2.2,
     -3:-2.2,
     -4:-2.2}
#ТРЕТИЙ ХОД -3, ответ 3
M07={2:(-2,{1:-1,-4:1.2,-1:1.2}),
     -2:2.2,1:2.2,-1:2.2,-4:2.2}
#третий 3
#M0={0:(4,{-4:(2,M01), 2:(-2,M02), -2:(2,M03), 3:(-3,M04),1:(-1,M05),-1:(1,M06),-3:(3,M07)})}

#ход4 отв 0
#-4
M41={3:(2,{-2:1,-1:-2,1:-2}),
     2:3.2,-2:3.2,-1:3.2,1:3.2}
M42={-3:(-1,{1:-2,-4:1.2,-2:1.2}),
     -4:-3.2,-2:-3.2,-1:-3.2,1:-3.2}
M43={-1:(-3,{3:2,-4:3.2,2:3.2}),
     -4:-1.2,2:-1.2,-3:-1.2,3:-1.2}
M44={-2:(1,{-1:-4,-4:-1.2,-3:-1.2}),
     -4:-2.2,-3:-2.2,-1:-2.2,1:-2.2}
M45={2:(3,{-3:-4,-4:-3.2,-1:-3.2}),
     -4:2.2,-1:2.2,-3:2.2,3:2.2}
M46={-2:(1,{3:-3,-4:-3,-3:-4}),
     2:-2.2,3:-2.2,-3:-2.2,-4:-2.2}
M47={2:(3,{1:-1,-4:-1,-1:-4}),
    -2:2.2,1:2.2,-1:2.2,-4:2.2}
#M4={4:(0,{-4:(-3,M41),2:(3,M42),-2:(1,M43),3:(2,M44),1:(-2,M45),-1:(2,M46),-3:(-2,M47)})}

M31={-2:(-4,{-1:4.2,4:-1.2,1:-1.2}),
     -4:-2.2,4:-2.2,-1:-2.2,1:-2.2}
M32={-4:(-1,{1:-2,-3:1.2,-2:1.2}),
    -3:-4.2,-2:-4.2,-1:-4.2,1:-4.2}
M33={-2:(1,{-1:-4,-3:-1.2,-4:-1.2}),
     -3:-2.2,-4:-2.2,1:-2.2,-1:-2.2}
M34={-4:(2,{-2:-3,-3:-2.2,1:-2.2}),
     -3:-4.2,-2:-4.2,2:-4.2,1:-4.2}
M35={-2:(4,{-4:-3,-3:-4.2,-1:-4.2}),
     -3:-2.2,-4:-2.2,4:-2.2,-1:-2.2}
M36={-2:(-3,{4:1,1:4,-1:1}),
     4:-2.2,-1:-2.2,1:-2.2,-3:-2.2}
M37={-4:(-3,{2:-1,-1:2,1:-1}),
     2:-4.2,1:-4.2,-1:-4.2,-3:-4.2}
#M3={3:(0,{-3:(2,M31),2:(4,M32),4:(2,M33),-1:(4,M34),1:(2,M35),-4:(2,M36),-2:(4,M37)})}


M= {0:(4,{-4:(2,M01), 2:(-2,M02), -2:(2,M03), 3:(-3,M04),1:(-1,M05),-1:(1,M06),-3:(3,M07)}),
    4:(0,{-4:(-3,M41),2:(3,M42),-2:(1,M43),3:(2,M44),1:(-2,M45),-1:(2,M46),-3:(-2,M47)}),
    3:(0,{-3:(2,M31),2:(4,M32),4:(2,M33),-1:(4,M34),1:(2,M35),-4:(2,M36),-2:(4,M37)})}


def prn(x,d="X"):

    # ставит на поле значек d и печатает поле игры

    fi1 = 1 - (x + 1) // 3
    fi2 = 19 + ((x + 1) % 3 - 1) * 3
    fi[fi1] = fi[fi1][0:fi2 - 1] + d + fi[fi1][fi2:]
    print(*fi, sep="\n")
    print()
    return


def hod(x,M,d="X"):
    global f
    x = int(x)
    if x in istoria:
        print("такой ход уже был")
        return
    if not( -5 < x < 5):
        print("недопустимый номер")
        return
    istoria.add(x)
    prn(x)
    N=M[f(x)]
#    print(x,f(x),N)
    if type(N)==int:
        prn(f(N),"0")
        print("ничья")
    elif type(N)==float:
        prn(f(N), "0")
        print("Вы проиграли")
    else:
        istoria.add(f(N[0]))
        prn(f(N[0]), "0")
#        print(N[0],f(N[0]))
        x = int(input("ваш ход ( от-4 до 4) >"))
        hod(x,N[1])
    return

# пять функций преобразования пространства методом отражения
# кодируются только 3 возможности первого хода, 0 или 3 или 4
# остальные рассматриваются как отражения известного варианта

def fnorm(x): #без отражения
    return int(x)

def fvertical(x): #отражение относительно оси игрик
    return int(x-2*((x+1)%3-1))

def fgorisont(x): #отражение относительно оси икс
    return int(x-6*((x+1)//3))

def fdiagonal(x): #отражение относительно оси y=x
    return int(-3+(x+1)//3+3*((x+1)%3))

def fmindiagonal(x): #отражение относительно оси y=-x
    return int(3-(x+1)//3-3*((x+1)%3))

def newstep():
# запршмвает координаты клетки,
# пересчитавет в координаты x y
    x = int(input("ваш ход ( от-4 до 4) >"))
    b = (x+1)//3
    a = -1+(x+1)%3
    return a, b

def step(a,b,c):
    global x
    global y
    x.append(a)
    y.append(b)
#    print(a,b,c,x,y,"\n")
    x1 = b*3+a
    if x1 in istoria:
        print("такой ход уже был")
        sys.exit()
    if not( -5 < x1 < 5):
        print("недопустимый номер")
        sys.exit()
    istoria.add(x1)

    d="X" if c%2 else "0"
    fi1 = 1-b
    fi2 = 19+a*3
    fi[fi1]=fi[fi1][0:fi2-1]+d+fi[fi1][fi2:]

    print(*fi, sep="\n")
    print()








x=input("Вы хотите ходить крестиками,то есть первым (Y/N) ?")
if x=="Y":


# ----------------------------------------------
# ИГРА НОЛИКАМИ ( ТЕ ПРОГРАММА ИГРАЕТ НОЛИКАМИ )
# ----------------------------------------------

    print(*fi, sep="\n") # печатаем табличку
    print()
    a=int(input("введите координаты крестика -4 до 4 >"))
    if a in {0,3,4}:
    #    print("норм")
        f=fnorm
        hod(a,M)
    elif a in {-3,-2}:
    #    print("горизонт")
        f=fgorisont
        hod(a, M)
    elif a in {2}:
    #    print("вертикаль")
        f=fvertical
        hod(a, M)
    elif a in {1}:
    #    print("диагональ")
        f = fdiagonal
        hod(a, M)
    elif a in {-1,-4}:
    #    print("минус диагональ")
        f=fmindiagonal
        hod(a, M)
    else:
        print("ход неправильный")
    print("конец игры")

else:


# ----------------------------------------------
# ПРОГРАММА НАЧИНАЕТ КРЕСТАМИ
# ----------------------------------------------



    x = []  # координата x каждого хода
    y = []  # координата y каждого хода
    # =============================================================
    # ход1
#   print("--")
    step(0, 0, 1)
    # ход2
    a, b = newstep()
    step(a, b, 2)
    if a == 0:  # ЕСЛИ 0 ПОСТАВИЛИ У ВЕРХНЕЙ ИЛИ НИЖНЕЙ СТЕНКИ
#        print("1>")
        step(-1, -y[1], 3)
        a, b = newstep()
        step(a, b, 4)
        if a == -x[2] and b == -y[2]:  # ЕСЛИ ЗАЩИТИЛИ УГОЛ
#            print("2>")
            step(x[2], y[1], 5)
            a, b = newstep()
            step(a, b, 6)
            if b == 0:
                step(-x[2], y[2], 7)
            else:
                step(x[2], 0, 7)
            print("вы проиграли")
        else:
            step(-x[2], -y[2], 5)
            print("вы проиграли")

    elif b == 0:  # ЕСЛИ 0 ПОСТАВИЛИ У ПРАВОЙ ИЛИ ЛЕВОЙ СТЕНКИ
        print("3>")
        step(-x[1], -1, 3)
        a, b = newstep()
        step(a, b, 4)
        if a == -x[2] and b == -y[2]:  # ЕСЛИ ЗАЩИТИЛИ УГОЛ
            print("4>")
            step(x[1], y[2], 5)
            a, b = newstep()
            step(a, b, 6)
            if a == 0:
                step(x[2], -y[2], 7)
            else:
                step(0, y[2], 7)
            print("вы проиграли")
        else:
            step(-x[2], -y[2], 5)
            print("вы проиграли")

    else:  # ЕСЛИ ПОСТАВИЛИ В УГОЛ
        step(-x[1], -y[1], 3)
        a, b = newstep()
        step(a, b, 4)
        if a == 0 and (b == y[1] or b == -y[1]):  # ЕСЛИ 0 *** У ВЕРХНЕЙ ИЛИ НИЖНЕЙ СТЕНКИ
            print("11>")
            step(-x[1], y[1], 5)
            a, b = newstep()
            step(a, b, 6)
            if b == 0:
                step(-x[2], y[2], 7)
            else:
                step(x[2], 0, 7)
            print("вы проиграли")
        elif (a == x[1] or a == -x[1]) and b == 0:  # ЕСЛИ 0 ** У ЛЕВОЙ ИЛИ ПРАВОЙ СТЕНКИ
            print("12>")
            step(x[1], -y[1], 5)
            a, b = newstep()
            step(a, b, 6)
            if a == 0:
                step(x[2], -y[2], 7)
            else:
                step(0, y[2], 7)
            print("вы проиграли")
        else:  # ЕСЛИ ВТОРОЙ НОЛИК ПОШЕЛ В УГОЛ
            if a == -x[1] and b == y[1]:  # УГОЛ ПО ГОРИЗОНТАЛЕ ОТ ПЕРВОГО
                print("31>")
                step(0, y[1], 5)
                a, b = newstep()
                step(a, b, 6)
                if not (a == 0 and b == -y[1]):
                    step(0, -y[1], 7)
                    print("вы проиграли")
                else:
                    step(x[1], 0, 7)
                    a, b = newstep()
                    step(a, b, 8)
                    if a == -x[1] and b == 0:
                        step(x[1], y[2], 9)
                        print("ничья")
                    else:
                        step(-x[1], 0, 9)
                        print("вы проиграли")
            elif a == x[1] and b == -y[1]:  # ВТОРОЙ 0 В УГОЛ НА ТОЙ ЖЕ ВЕРТИКАЛЕ ЧТО И ПЕРВЫЙ
                print("41>")
                step(x[1], 0, 5)
                a, b = newstep()
                step(a, b, 6)
                if not (a == -x[1] and b == 0):
                    step(-x[1], 0, 7)
                    print("вы проиграли")
                else:
                    step(0, y[1], 7)
                    a, b = newstep()
                    step(a, b, 8)
                    if a == 0 and b == -y[1]:
                        step(x[2], y[1], 9)
                        print("ничья")
                    else:
                        step(0, -y[1], 9)
                        print("вы проиграли")
    print("конец игры")





